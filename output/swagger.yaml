openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Checkout.com API Reference
  x-logo:
    url: "https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg"
    backgroundColor: "#E6E7EC"
    altText: "Checkout.com API logo"
  contact:
    name: Checkout.com Support
    url: 'https://checkout.com'
    email: support@checkout.com
  license:
    name: Checkout.com
    url: 'https://checkout.com/api/license/'
  termsOfService: 'https://checkout.com/terms/'
  description: >
    # Introduction
    
    Checkout.com provides a collection of APIs that enable you to process and manage payments.  
    
    Our APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors.
    You can consume the APIs directly using your favorite HTTP/REST library or, if you'd like to make use of one of our SDKs, please let our Integration team know at <a href="mailto:integration@checkout.com" target="_blank">integration@checkout.com</a>.  
  

    Our unified payments API allows you to accept payments, as well as pay out to a variety of destinations, all using the same integration. 
    
    
    And with our workflow management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly. 
    
    # Authentication
    
    When you sign up for an account, you are given a public key, and either a set of client credentials or a secret key. You authenticate with our API by following the appropriate authentication flow, using either your API keys or your client credentials.


    Unless explicitly stated, all endpoints require authentication using either your client credentials or your secret key. Public keys should only be used in JavaScript or native applications.


    - <b>Client-side authentication</b>. Use your [public key](#section/Authentication/ApiPublicKey) for client-side authentication. It only has access to a limited set of our APIs – mostly those called as part of your payment environment.


    - <b>Server-to-server authentication</b>. Use your [secret key](#section/Authentication/ApiSecretKey) or [client credentials](#section/Authentication/OAuth) for server-to-server communication. Support for API keys depends on the endpoint.


    Never share your client credentials, API keys, or access tokens. Keep them guarded and secure.

servers:
  - url: https://api.checkout.com
    description: Live API
  - url: https://api.sandbox.checkout.com
    description: Sandbox API
tags:
  - name: Access
  - name: Payments
    description: Process and manage payments from a variety of sources and to various destinations all within one integration.
  # - name: Sources
  #   description: Create a payment source for a customer that you can use for one or more payments.
  - name: Tokens
    description: Create a token that represents a card's details that you can later use to request a payment, without you having to process or store any sensitive information.
  - name: Instruments
    description: Capture your customers’ bank account information and securely store it in the Vault to use for future payouts.
  - name: Forex
    description: Checkout.com Foreign Exchange services
  - name: Disputes
    description: Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response.
  - name: Marketplace
    description: Manage all your sub-entities (also known as sub-merchants) through one integration, globally.
  - name: Sessions
    description: Use Sessions to authenticate transactions with 3D Secure (3DS) and comply with Strong Customer Authentication (SCA) requirements.
  - name: Workflows
    description: Use Workflows to start receiving webhook notifications for your payments, disputes, and marketplace sub-entities.
  # - name: Files
  #   description: |
  #     Upload files to be used as input to other APIs

# x-tagGroups:
# - name: Flow
#   tags:
#     - Events
#     - Workflows
paths:
  /connect/token:
    servers:
      - url: https://access.checkout.com
        description: Live API
      - url: https://access.sandbox.checkout.com
        description: Sandbox API
    post:
      summary: Request an access token
      tags: 
        - Access
      responses:
        '200':
          description: OK - A successful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 2YotnFZFEjr1zCsicMWpAA
                  token_type:
                    type: string
                    example: example
                  expires_in:
                    type: number
                    example: 3600
    
        '400':
          description: Bad request - An unsuccessful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                     - invalid_request
                     - invalid_client
                     - invalid_grant
                     - unauthorized_client
                     - unsupported_grant_type
                     - invalid_scope
      description: OAuth endpoint to exchange your access key ID and access key secret for an access token.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - client_credentials
                  example: client_credentials
                client_id:
                  type: string
                  description: "Access key ID"
                client_secret:
                  type: string
                  description: "Access key secret"
                scope:
                  type: string
                  description: The access key scope
                  example: gateway
            examples:
              example-1:
                value:
                  grant_type: client_credentials
                  client_id: ack_clckqmmnyfiupexjew7shh5ahe
                  client_secret: Pmg36sDWQ9WxtPR3
      x-code-samples:
        - lang: cURL
          source: "curl --location --request POST 'https://access.checkout.com/connect/token'\n  --header 'Content-Type: application/x-www-form-urlencoded'\n  --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ='\n  --data-urlencode 'grant_type=client_credentials'\n  --data-urlencode 'scope=gateway'"
  /disputes:
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        - ApiSecretKey: []
      summary: Get disputes
      description: >-
        Returns a list of all disputes against your business. The results will be
        returned in reverse chronological order, showing the last modified dispute
        (for example, where you've recently added a piece of evidence) first. You
        can use the optional parameters below to skip or limit results.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
            default: 50
          required: false
          description: The numbers of results to return
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of results to skip
        - in: query
          name: from
          schema:
            type: string
            format: ISO-8601
          required: false
          description: The date and time from which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: to
          schema:
            type: string
            format: ISO-8601
          required: false
          description: The date and time until which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: The unique identifier of the dispute
        - in: query
          name: entity_ids
          schema:
            type: string
            example: 'ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku'
          required: false
          description: One or more comma-separated client entities. This works like a logical *OR*
            operator
        - in: query
          name: sub_entity_ids
          schema:
            type: string
            example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi'
          required: false
          description: One or more comma-separated sub-entities. This works like a logical *OR*
            operator
        - in: query
          name: statuses
          schema:
            type: string
            example: 'evidence_required,evidence_under_review'
          required: false
          description: One or more comma-separated statuses. This works like a logical *OR*
            operator
        - in: query
          name: payment_id
          schema:
            type: string
          required: false
          description: The unique identifier of the payment
        - in: query
          name: payment_reference
          schema:
            type: string
          required: false
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
        - in: query
          name: payment_arn
          schema:
            type: string
          required: false
          description: The acquirer reference number (ARN) that you can use to query the
            issuing bank
        - in: query
          name: payment_mcc
          schema:
            type: string
          required: false
          description: The merchant category code (MCC) of the payment (ISO 18245)
        - in: query
          name: this_channel_only
          schema:
            type: boolean
          required: false
          description: If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that
            business
      responses:
        '200':
          description: Disputes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputePaged'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable paging
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingError'
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputes = await cko.disputes.get({\n  limit: 5,\n  id: \"dsp_bc94ebda8d275i461229\",\n});"
  /disputes/{dispute_id}:
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        - ApiSecretKey: []
      summary: Get dispute details
      description: Returns all the details of a dispute using the dispute identifier.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputeDetails = await cko.disputes.getDetails(\n  \"dsp_bc94ebda8d275i461229\"\n);"
  /disputes/{dispute_id}/accept:
    post:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:accept
        - ApiSecretKey: []
      summary: Accept dispute
      description: >-
        If a dispute is legitimate, you can choose to accept it. This will close it
        for you and remove it from your list of open disputes. There are no further
        financial implications.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst accept = await cko.disputes.accept(\"dsp_bc94ebda8d275i461229\");"
  /disputes/{dispute_id}/evidence:
    put:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:provide-evidence
        - ApiSecretKey: []
      summary: Provide dispute evidence
      description: >
        Adds supporting evidence to a dispute. Before using this endpoint, you first
        need to [upload your files](#tag/Disputes/paths/~1files/post) using the file
        uploader. You will receive a file id (prefixed by `file_`) which you can
        then use in your request.
        Note that this only attaches the evidence to the dispute, it does not send
        it to us. Once ready, you will need to submit it.
        **You must provide at least one evidence type in the body of your request.**
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvideEvidenceRequest'
            required: true
      responses:
        '204':
          description: Dispute evidence provided successfully
        '400':
          description: Unprocessable
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
        '422':
          description: Unprocessable entity
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst evidence = await cko.disputes.provideEvidence(\n  \"dsp_bc94ebda8d275i461229\",\n  {\n    proof_of_delivery_or_service_text: \"http://checkout.com/document.pdf\",\n  }\n);"
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        # - ApiKey: []
      summary: Get dispute evidence
      description: >
        Retrieves a list of the evidence submitted in response to a specific
        dispute. 
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute evidence retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getEvidence = await cko.disputes.getEvidence(\"dsp_bc94ebda8d275i461229\");"
    post:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:provide-evidence
        # - ApiKey: []
      summary: Submit dispute evidence
      description: >-
        With this final request, you can submit the evidence that you have
        previously provided. Make sure you have provided all the relevant
        information before using this request. You will not be able to amend your
        evidence once you have submitted it.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute evidence submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst submitEvidence = await cko.disputes.submit(\"dsp_bc94ebda8d275i461229\");"
  /files:
    post:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:provide-evidence
        - ApiSecretKey: []
      servers:
         - url: https://files.checkout.com/
           description: Production server
         - url: https://files.sandbox.checkout.com/
           description: Sandbox server
      summary: Upload file
      description: >-
        Upload a file to use as evidence in a dispute. Your file must be in either
        JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst file = await cko.files.upload({\n  path: fs.createReadStream(\"./test/files/evidence.jpg\"),\n  purpose: \"dispute_evidence\",\n});"
  /files/{file_id}:
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        - ApiSecretKey: []
      summary: Get file information
      description: Retrieve information about a file that was previously uploaded.
      parameters:
        - in: path
          name: file_id
          schema:
            type: string
          required: true
          description: The file identifier. It is always prefixed by `file_`.
      responses:
        '200':
          description: File information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResult'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: File not found
        '429':
          description: Too many requests or duplicate request detected
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getFile = await cko.files.getFile(\"file_zna32sccqbwevd3ldmejtplbhu\");"
  /workflows:
    get:
      security:
        - OAuth:
          - flow
          - flow:workflows
      tags:
        - Workflows
      summary: Get all workflows
      description: |
        Get all workflows
      responses:
        '200':
          description: Workflows retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-all-workflows-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
    
    
    post:
      security:
        - OAuth:
          - flow
          - flow:workflows
      tags:
        - Workflows
      summary: Add a workflow
      description: |
        Add a new Flow workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-workflow-request'
      responses:
        '201':
          description: Workflow added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
  /workflows/{workflowId}:
    get:
      security:
        - OAuth:
            - flow
            - flow:workflows
      tags:
        - Workflows
      summary: Get a workflow
      description: |
        Get the details of a workflow
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '200':
          description: Workflow retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
    
    # put:
    #   servers:
    #     - url: http://flow.cko.lon/client
    #       description: QA
    #   security:
    #     - OAuth:
    #         - flow
    #         - flow:workflows
    #   tags:
    #     - Workflows
    #   summary: Update a workflow
    #   description: |
    #     Update a workflow
    #   parameters:
    #     - in: path
    #       name: workflowId
    #       schema:
    #         type: string
    #         pattern: ^wf_[a-z0-9]{26}$
    #       required: true
    #       description: The workflow identifier
    #       example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/add-workflow-request'
    #   responses:
    #     '201':
    #       description: Workflow updated successfully
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/add-workflow-response'
    #       headers:
    #         Cko-Request-Id:
    #           schema:
    #             $ref: "#/components/headers/Cko-Request-Id"
    #         Cko-Version:
    #           schema:
    #             $ref: "#/components/headers/Cko-Version"
    #     '401':
    #       description: Unauthorized
    #     '404':
    #       description: Workflow not found 
    #     '500':
    #       description: Internal Error
    
    delete:
      tags:
        - Workflows
      summary: Remove a workflow
      description: |
        Removes a workflow so it is no longer being executed. 
        Actions of already executed workflows will be still processed.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '204':
          description: Workflow removed successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
  /workflows/event-types:
    get:
      security:
        - OAuth:
          - flow
          - flow:workflows
      tags:
        - Workflows
      summary: Get event types
      description: |
        Get a list of sources and their events for building new workflows
      responses:
        '200':
          description: Event types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-types-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
  /workflows/events/{eventId}:
    get:
      security:
        - OAuth:
          - flow
          - flow:events
      tags:
        - Workflows
      summary: Get an event
      description: |
        Get the details of an event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The event identifier
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-response'        
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"    
        '401':
          description: Unauthorized
        '404':
          description: Event not found
        '500':
          description: Internal Error
  /workflows/events/subject/{subjectId}:
    get:
      security:
        - OAuth:
          - flow
          - flow:events
      tags:
        - Workflows
      summary: Get subject events
      description: |
        Get all events that relate to a specific subject
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
          required: true
          description: The event identifier
          example: pay_wlu3wxc26jounofs5iez75qaqa
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject-events-response'        
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version" 
        '404':
          description: Subject not found
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"    
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
  /forex/quotes:
    post:
      tags:
        - Forex
      security: 
        - OAuth: 
          - fx
      summary: Request a quote
      description: |
        Request an exchange rate between a source and destination currency pair that will be used to process one or more payouts. You must submit a payout with the FX quote identifier before the quote expires. If the FX quote identifier is omitted from a payout, and the source and destination currencies differ, the current market exchange rate will be used.
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/QuoteRequest'
      responses:
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
  /instruments:
    post:
      tags:
        - Instruments
      security: 
        - OAuth: 
          - vault
          - vault:instruments
        - ApiSecretKey: []
      summary: Create an instrument
      description: |
        Create a bank account payment instrument that you can later use as the destination for one or more payouts. <br><br>The parameters you need to provide depend on the destination country and currency. See <a href="https://docs.checkout.com/pay-to-bank/payout-formatting" target="_blank">our docs</a> and the <a href="#tag/Instruments/paths/~1validation~1bank-accounts~1{country}~1{currency}/get">GET endpoint below</a>.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInstrumentRequest'
      responses:
        '201':
          description: Instrument created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInstrumentResponse'  
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\ntry {\n  const instrument = await cko.instruments.create({\n    // infered type \"token\",\n    token: \"tok_bzi43qc6jeee5mmnfo4gnsnera\", // Generated by Checkout.Frames\n  });\n} catch (err) {\n  console.log(err.name);\n}"
  /instruments/{id}:
    patch:
      tags:
        - Instruments
      security: 
        - OAuth: 
          - vault
          - vault:instruments
        - ApiSecretKey: []
      summary: Update an instrument
      description: |
        Update a bank account payment instrument that you can later use as the destination for one or more payouts.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: src_ubfj2q76miwundwlk72vxt2i7q
          pattern: "^(src_)[[a-z0-9]]{{26}}$)"
          description: The instrument identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstrumentRequest'
      responses:
        '200':
          description: Instrument updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateInstrumentResponse' 
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
        '422':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
    
    
    delete:
      tags:
        - Instruments
      security: 
        - OAuth: 
          - vault
          - vault:instruments
        - ApiSecretKey: []
      summary: Delete an instrument
      description: |
        Delete a payment instrument.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: src_ubfj2q76miwundwlk72vxt2i7q
          pattern: "^(src_)[[a-z0-9]]{{26}}$)"
          description: The payment instrument to be deleted
      responses:
        '204':
          description: Instrument deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
        '500':
          description: Internal Error
  /marketplace/entities:
    post:
      description: |
        Onboard a sub-entity so they can start receiving payments. Once created, Checkout.com will run due diligence checks. 
        If the checks are successful, we'll enable payment capabilities for that sub-entity and they will start receiving payments.
      summary: Onboard a sub-entity
      requestBody:
        required: true
        description: The sub-entity to be onboarded.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreateRequest'
            examples:
              Company:
                value:
                  reference: superhero1234
                  contact_details: 
                    phone:
                      number: "2345678910"
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - "5669"
                  company:
                    business_registration_number: "452349600005"
                    legal_name: "Super Hero Masks Inc."
                    trading_name: "Super Hero Masks"
                    principal_address: 
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    representatives: 
                      - first_name: "John"
                        last_name: "Doe"
                        address: 
                          address_line1: "90 Tottenham Court Road"
                          city: "London"
                          zip: "W1T4TJ"
                          country: "GB"
                        identification:
                          national_id_number: "AB123456C"
                        phone:
                          number: "2345678910"
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
              Individual:
                value:
                  reference: superhero1234
                  contact_details:
                    phone:
                      number: "2345678910"
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - "5669"
                  individual:
                    first_name: "John"
                    last_name: "Doe"
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    national_tax_id: "TAX123456"
                    date_of_birth:
                      day: 05
                      month: 06
                      year: 1995
                    identification:
                      national_id_number: "AB123456C"
      security:
        - OAuth:
          - marketplace
      responses:
        '201':
          description: Sub-entity onboarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBasicResponseWithLinks'
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: Sub-entity onboarding request conflicted with an existing sub-entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityLinks'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
  /marketplace/entities/{id}:
    parameters:
      - in: path
        name: id
        description: The ID of the sub-entity.
    
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    get:
      description: Use this endpoint to retrieve a sub-entity and its full details.
      summary: Get sub-entity details
      security:
        - OAuth:
          - marketplace
      responses:
        '200':
          description: Sub-entity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExtendedResponse'
              examples:
                Company:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                      payouts:
                        enabled: false
                    status: pending
                    contact_details:
                      phone:
                        number: "2345678910"
                    profile:
                      urls:
                      - https://www.superheroexample.com
                      mccs:
                      - "5669"
                    company:
                      business_registration_number: "452349600005"
                      legal_name: Super Hero Masks Inc.
                      trading_name: Super Hero Masks
                      principal_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      representatives:
                      - first_name: John
                        middle_name: 
                        last_name: Doe
                        address:
                          address_line1: 90 Tottenham Court Road
                          city: London
                          zip: W1T4TJ
                          country: GB
                        identification:
                          national_id_number: "AB123456C"
                          document:
                            type: "driving_license"
                            front: "file_wxglze3wwywujg4nna5fb7ldli"
                            back: "file_adglze3wwywujg4nna5fb7l1sg"
                        phone:
                          number: "2345678910"
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
                    instruments:
                      - id: src_hmnkhxlshf3uhljow7zt7sf2cq
                        label: Peter's Personal Account
                    _links:
                      self:
                        href: https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli
                Individual:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                      payouts:
                        enabled: false
                    contact_details:
                      phone:
                        number: "2345678910"
                    profile:
                      urls:
                      - https://www.superheroexample.com
                      mccs:
                      - "5669"
                    individual:
                      first_name: John
                      middle_name: Paul
                      last_name: Doe
                      trading_name: Super Hero Masks
                      legal_name: John Paul Doe
                      national_tax_id: "1234567"
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      date_of_birth:
                        day: 05
                        month: 06
                        year: 1995
                      identification:
                        national_id_number: "AB123456C"
                        document:
                          type: "driving_license"
                          front: "file_wxglze3wwywujg4nna5fb7ldli"
                          back: "file_adglze3wwywujg4nna5fb7l1sg"
                    instruments:
                      - id: src_hmnkhxlshf3uhljow7zt7sf2cq
                        label: Peter's Personal Account
                    _links:
                      self:
                        href: https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '401':
          description: Unauthorized
        '404':
          description: Sub-entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
    put:
      description: |
        You can update all fields under the Contact details, Profile, and Company objects. 
        Please note that when you update a sub-entity we may conduct further due diligence checks when necessary. During these checks, your payment capabilities will remain the same.
      summary: Update sub-entity details
      requestBody:
        required: true
        description: The sub-entity to be updated.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityUpdateRequest"
            examples:
              Company:
                value:
                  contact_details: 
                    phone:
                      number: "2345678910"
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - "5669"
                  company:
                    business_registration_number: "452349600005"
                    legal_name: "Super Hero Masks Inc."
                    trading_name: "Super Hero Masks"
                    principal_address: 
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    representatives: 
                      - first_name: "John"
                        last_name: "Doe"
                        address: 
                          address_line1: "90 Tottenham Court Road"
                          city: "London"
                          zip: "W1T4TJ"
                          country: "GB"
                        identification:
                          national_id_number: "AB123456C"
                        phone:
                          number: "2345678910"
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
              Individual:
                value:
                  contact_details:
                    phone:
                      number: "2345678910"
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - "5669"
                  individual:
                    first_name: "John"
                    last_name: "Doe"
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    national_tax_id: "TAX123456"
                    date_of_birth:
                      day: 05
                      month: 06
                      year: 1995
                    identification:
                      national_id_number: "AB123456C"
      security:
        - OAuth:
          - marketplace
      responses:
        "200":
          description: Sub-entity updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityBasicResponseWithLinks"
          headers:
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
        "401":
          description: Unauthorized
        "404":
          description: Sub-entity not found
        "422":
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
  /marketplace/entities/{id}/instruments:
    parameters:
      - in: path
        name: id
        description: The ID of the sub-entity.
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    post:
      description: Create a bank account payment instrument for your sub-entity that you can later use as the destination for their payouts. 
      summary: Add a payment instrument
      requestBody:
        required: true
        description: A JSON payload containing the payment instrument details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarketplaceInstrumentCreateRequest'
            examples:
              BankAccount:
                value:
                  label: Peter's Personal Account
                  type: bank_account
                  account_number: "12345678"
                  bank_code: "050389"
                  currency: GBP
                  country: GB
                  account_holder:
                    first_name: Peter
                    last_name: Parker
                    billing_address:
                      address_line1: 90 Tottenham Court Road
                      city: London
                      state: London
                      zip: W1T 4TJ
                      country: GB
      security:
        - OAuth:
          - marketplace
      responses:
        '202':
          description: Instrument creation request accepted
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
  /payments:
    post:
      security:
        - OAuth:
          - gateway
          - gateway:payment
        - ApiSecretKey: []
      tags:
        - Payments
      summary: Request a payment or payout
      operationId: requestAPaymentOrPayout
      description: |
        Send a payment or payout 
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PaymentRequest'
                - $ref: '#/components/schemas/PayoutRequest'
            examples:
              Payment:
                value: 
                  source:
                    type: token
                    token: tok_4gzeau5o2uqubbk6fufs3m7p54
                  amount: 6540
                  currency: USD
                  payment_type: Recurring
                  reference: "ORD-5023-4E89"
                  description: "Set of 3 masks"
                  capture: true
                  capture_on: "2019-09-10T10:11:12Z"
                  customer:
                    id: "cus_udst2tfldj6upmye2reztkmm4i"
                    email: "jokershere@gmail.com"
                    name: "Jack Napier"
                  billing_descriptor:
                    name: SUPERHEROES.COM
                    city: GOTHAM
                  shipping:
                    address:
                      address_line1: Checkout.com
                      address_line2: 90 Tottenham Court Road
                      city: London
                      state: London
                      zip: W1T 4TJ
                      country: GB
                    phone:
                      country_code: "+1"
                      number: 415 555 2671
                  3ds:
                    enabled: true
                    attempt_n3d: true
                    eci: "05"
                    cryptogram: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
                    xid: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
                    version: "2.0.1"
                  previous_payment_id: "pay_fun26akvvjjerahhctaq2uzhu4"
                  risk:
                    enabled: false
                  success_url: "http://example.com/payments/success"
                  failure_url: "http://example.com/payments/fail"
                  payment_ip: "90.197.169.245"
                  recipient:
                    dob: "1985-05-15"
                    account_number: "5555554444"
                    zip: W1T
                    last_name: Jones
                  metadata:
                    coupon_code: "NY2018"
                    partner_id: 123989
              Payout:
                value:
                  source:
                    type: "currency_account"
                    id: "ca_y3oqhf46pyzuxjbcn2giaqnb44"
                  destination:
                    type: "id"
                    id: "src_gsd2agaqd2sernz5tpcfv555nq"
                  amount: 1000
                  currency: GBP
                  reference: "PO-215-5721"
                  billing_descriptor:
                    reference: "Withdrawal"
                  sender:
                    type: "instrument"
                    reference: "8285282045818"
                  instruction:
                    purpose: "Withdrawal"
                    scheme: "local"
                    quote_id: "qte_mbabizu24mvu3mela5njyhpit4"
                  processing_channel_id: "pc_hpswyyx23geezflc2ocz3exn4y"
    
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              example:
                id: "pay_mbabizu24mvu3mela5njyhpit4"
                action_id: "act_mbabizu24mvu3mela5njyhpit4"
                amount: 6540
                currency: "USD"
                approved: true
                status: "Authorized"
                auth_code: "770687"
                response_code: "10000"
                response_summary: "Approved"
                3ds:
                  downgraded: true
                  enrolled: "N"
                risk:
                  flagged: true
                source:
                  type: "card"
                  id: "src_nwd3m4in3hkuddfpjsaevunhdy"
                  billing_address:
                    address_line1: "Checkout.com"
                    address_line2: "90 Tottenham Court Road"
                    city: "London"
                    state: "London"
                    zip: "W1T 4TJ"
                    country: "GB"
                  phone:
                    country_code: "+1"
                    number: "415 555 2671"
                  last4: "4242"
                  fingerprint: "F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832"
                  bin: "424242"
                customer:
                  id: "cus_udst2tfldj6upmye2reztkmm4i"
                  email: "jokershere@gmail.com"
                  name: "Jack Napier"
                processed_on: '2019-09-10T10:11:12Z'
                reference: "ORD-5023-4E89"
                processing:
                  retrieval_reference_number: "909913440644"
                  acquirer_transaction_id: "440644309099499894406"
                eci: "06"
                scheme_id: "489341065491658"
                _links:
                  self:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                  action:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions"
                  void:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures"
                  capture:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids"
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '202':
          description: Payment asynchronous or further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n    Reference = \"ORD-090857\",\n    Capture = false,\n    ThreeDs = true\n};\n\ntry\n{\n    var response = await api.Payments.RequestAsync(paymentRequest);\n\n    if (response.IsPending && response.Pending.RequiresRedirect())\n    {\n        return Redirect(response.Pending.GetRedirectLink().Href);\n    }\n\n    if (response.Payment.Approved)\n        return PaymentSucessful(response.Payment);\n\n    return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n    return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n    Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n    throw;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nTokenSource tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nPaymentRequest<TokenSource> paymentRequest = PaymentRequest.fromSource(tokenSource, Currency.USD, 5600);\npaymentRequest.setReference(\"ORD-090857\");\npaymentRequest.setCapture(false);\npaymentRequest.setThreeDS(ThreeDSRequest.from(true));\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestAsync(paymentRequest).get();\n\n    if (response.isPending() && response.getPending().requiresRedirect()) {\n        return redirect(response.getPending().getRedirectLink().getHref());\n    }\n\n    if (response.getPayment().isApproved())\n        return paymentSucessful(response.getPayment());\n\n    return paymentDeclined(response.getPayment());\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
        - lang: Node (Beta)
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n    const payment = await cko.payments.request({\n        source: {\n            // infered type: \"token\"\n            token: 'tok_bzi43qc6jeee5mmnfo4gnsnera' // Generated by Checkout.Frames\n            billing_address: {\n                address_line1: 'Wall Street',\n                address_line2: 'Dollar Avenue',\n                city: 'London',\n                state: 'London',\n                zip: 'W1W W1W',\n                country: 'GB'\n            },\n            phone: {\n                country_code: '44',\n                number: '7123456789'\n            }\n        },\n        currency: 'USD',\n        amount: 1000,\n        payment_type: 'Regular',\n        reference: 'ORDER 1234',\n        description: 'Mint Tea',\n        customer: {\n            email: 'new_user@email.com',\n            name: 'John Smith'\n        },\n        metadata: {\n            myCustomProp: {\n                value: 1\n            }\n        }\n    });\n\n} catch (err) {\n    console.log(err.name)\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
  /payments/{id}:
    get:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-details
        - ApiSecretKey: []
      summary: Get payment details
      description: |
        Returns the details of the payment with the specified identifier string.
    
        If the payment method requires a redirection to a third party (e.g., 3D Secure),
        the redirect URL back to your site will include a `cko-session-id` query parameter
        containing a payment session ID that can be used to obtain the details of the payment, for example:
    
        http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay|sid)_(\\w{26})$"
          required: true
          description: The payment or payment session identifier
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/PaymentDetails'
                - $ref: '#/components/schemas/PayoutDetails'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = await api.Payments.GetAsync(sessionId);\n\nif (payment.Approved)\n{            \n    var cardSourceId = payment.Source.AsCard().Id;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = api.paymentsClient().getAsync(sessionId).get();\n\nif (payment.isApproved()) {\n    String cardSourceId = ((CardSourceResponse)payment.getSource()).getId();\n}"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.get(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n	$details = $checkout->payments()->details($threeDsSessionId);\n	return $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n	return $ex->getErrors();\n}"
  /payments/{id}/actions:
    get:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-details
        - ApiSecretKey: []
      summary: Get payment actions
      description: |
        Returns all the actions associated with a payment ordered by processing date in descending order (latest first).
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      responses:
        '200':
          description: Payment actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentActionsResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nIEnumerable<PaymentAction> paymentActions = await api.Payments.GetActionsAsync(paymentId);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nList<PaymentAction> paymentActions = api.paymentsClient().getActionsAsync(paymentId).get();"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.getActions(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
  /payments/{id}/authorizations:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-authorizations
        - ApiSecretKey: []
      summary: Increment authorization
      description: |
        Request an incremental authorization to increase the authorization amount or extend the authorization's validity period (Mastercard only).
    
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
      responses:
        '201':
          description: Authorization processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
  /payments/{id}/captures:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-captures
        - ApiSecretKey: []
      summary: Capture a payment
      description: |
        Captures a payment if supported by the payment method.
    
        For card payments, capture requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the capture is successful.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '202':
          description: Capture accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\nawait api.Payments.CaptureAsync(paymentId);\n\n// Or partial capture\nvar captureRequest = new CaptureRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.CaptureAsync(paymentId, captureRequest);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\napi.paymentsClient().captureAsync(paymentId).get();\n\n// Or partial capture\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().captureAsync(paymentId, captureRequest).get();"
        - lang: Node (Beta)
          source: "import import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n    amount: 1000,\n    reference: 'CAPTURE ORDER 1234',\n    metadata: {\n        value: 'my value'\n    }\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
  /payments/{id}/refunds:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-refunds
        - ApiSecretKey: []
      summary: Refund a payment
      description: |
        Refunds a payment if supported by the payment method.
    
        For card payments, refund requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the refund is successful.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '202':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Refund not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\nawait api.Payments.RefundAsync(paymentId);\n\n// Or partial refund\nvar refundRequest = new RefundRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.RefundAsync(paymentId, refundRequest);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\napi.paymentsClient().refundAsync(paymentId).get();\n\n// Or partial refund\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().refundAsync(paymentId, refundRequest).get();"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.refund(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"REFUND ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
  /payments/{id}/voids:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-voids
        - ApiSecretKey: []
      summary: Void a payment
      description: |
        Voids a payment if supported by the payment method.
    
        For card payments, void requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the void is successful.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
      responses:
        '202':
          description: Void accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoidAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Void not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nawait api.Payments.VoidAsync(paymentId);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\napi.paymentsClient().voidAsync(paymentId).get();"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.void(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"VOID ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
  /sessions:
    post:
      tags:
        - Sessions
      security:
        - OAuth:
          - sessions:app
          - sessions:browser
      summary: Request a session
      description: |
        Create a payment session to authenticate a cardholder before requesting a payment.
        Payment sessions can be linked to one or more payments (in the case of recurring and other merchant-initiated payments).
    
        The `next_actions` object in the response tells you which actions can be performed next. 
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '201':
          description: Session processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionOkResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '202':
          description: Session accepted and further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the `channel_data` property in the request is browser related.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not Implemented
        '503':
          description: Service not available. A temporary server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sessions/{id}:
    get:
      tags:
        - Sessions
      security:
        - OAuth:
          - sessions:app
          - sessions:browser
        - SessionSecret: []
      summary: Get session details
      description: |
        Returns the details of the session with the specified identifier string.
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
        - name: channel
          in: header
          description: Optionally provide the type of channnel so you only get the relevant actions
          schema:
            type: string
            enum: 
              - browser
              - app
            description: If a value is not provided, and if the `status` is `pending`, then `next_actions` will return `collect_channel_data` and if available, `issuer_fingerprint`.
            example: browser
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the session was initiated with the scope `sessions:browser`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad gateway
  /sessions/{id}/collect-data:
    put:
      security:
        - OAuth:
          - sessions:app
          - sessions:browser
        - SessionSecret: []
      summary: Update a session
      description: Update a session by providing information about the environment.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sessions/{id}/complete:
    post:
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: []
      summary: Complete a session
      description: |
        Completes a session by posting the the following request to the callback URL (only relevant for non hosted sessions):
        ```
        {
           "session_id": "sid_llraltf4jlwu5dxdtprcv7ba5i",
           "amount" : 6540,
           "currency": "USD",
           "status": "approved",
           "authentication_type": "regular",
           "authentication_category": "payment",
           "reference": "ORD-5023-4E89",
           "approved": true,
           "protocol_version": "2.1.0",
           "response_code": "Y",
           "response_reason": "01",
           "cryptogram": "MTIzNDU2Nzg5MDA5ODc2NTQzMjE=",
           "eci": "05",
           "xid": "XSUErNftqkiTdlkpSk8p32GWOFA",
           "cardholder_info": "Card declined. Please contact your issuing bank.",
           "challenged": true
        }
        ```
        <br/>
        The fields of the above are the same as they would be in a GET session response
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session completed successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sessions/{id}/issuer-fingerprint:
    put:
      security:
        - OAuth:
            - sessions:browser
        - SessionSecret: []
      summary: Update session 3DS Method completion indicator
      description: Update the session's 3DS Method completion indicator based on the result of accessing the 3DS Method URL.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreeDsMethodCompletion'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponseAfterChannelDataSupplied'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tokens:
    post:
      tags:
        - Tokens
      security: 
        - ApiPublicKey: []
      summary: Request a token
      description: |
        Exchange card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes. 
        To create a token, please authenticate using your public key. 
    
        **Please note:** You should only use this for testing purposes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Reference token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\", { pk: \"pk_YYYY\" });\n\ntry {\n  const token = await cko.tokens.request({\n    // infered type: \"applepay\"\n    token_data: {\n      version: \"EC_v1\",\n      data: \"t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...\",\n      signature: \"MIAGCSqGbGUg...\",\n      header: {\n        ephemeralPublicKey: \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...\",\n        transactionId: \"3cee89679130a4b...\",\n      },\n    },\n  });\n} catch (err) {\n  console.log(err.name);\n}"
  /validation/bank-accounts/{country}/{currency}:
    get:
      tags:
        - Instruments
      security: 
        - OAuth: 
          - payout:bank-details
      summary: Get bank account field formatting
      description: |
        Returns the bank account field formatting required to create bank account instruments or perform payouts for the specified country and currency.
      parameters:
        - in: path
          name: country
          schema:
            type: string
            minLength: 2
            maxLength: 2
          required: true
          description: | 
            The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a>
        - in: path
          name: currency
          schema:
            type: string
            minLength: 3
            maxLength: 3
          required: true
          description: | 
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
        - in: query
          name: account-holder-type
          schema:
            type: string
            enum:
              - individual
              - corporate
              - government
          description: | 
            The type of account holder that will be used to filter the fields returned
        - in: query
          name: payment-network
          schema:
            type: string
            enum:
              - local
              - sepa
              - fps
              - ach
              - fedwire
              - swift
          description: | 
            The banking network that will be used to filter the fields returned
      responses:
        '200':
          description: Bank account fields retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountFields'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Fields not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
components:
